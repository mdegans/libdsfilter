// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: meta.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "meta.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* Frame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Frame_reflection_ = NULL;
const ::google::protobuf::Descriptor* Person_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Person_reflection_ = NULL;
const ::google::protobuf::Descriptor* BBox_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BBox_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_meta_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_meta_2eproto() {
  protobuf_AddDesc_meta_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "meta.proto");
  GOOGLE_CHECK(file != NULL);
  Frame_descriptor_ = file->message_type(0);
  static const int Frame_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, frame_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, source_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, people_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, sum_danger_),
  };
  Frame_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Frame_descriptor_,
      Frame::default_instance_,
      Frame_offsets_,
      -1,
      -1,
      -1,
      sizeof(Frame),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Frame, _is_default_instance_));
  Person_descriptor_ = file->message_type(1);
  static const int Person_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Person, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Person, is_danger_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Person, danger_val_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Person, bbox_),
  };
  Person_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Person_descriptor_,
      Person::default_instance_,
      Person_offsets_,
      -1,
      -1,
      -1,
      sizeof(Person),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Person, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Person, _is_default_instance_));
  BBox_descriptor_ = file->message_type(2);
  static const int BBox_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BBox, left_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BBox, top_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BBox, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BBox, width_),
  };
  BBox_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BBox_descriptor_,
      BBox::default_instance_,
      BBox_offsets_,
      -1,
      -1,
      -1,
      sizeof(BBox),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BBox, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BBox, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_meta_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Frame_descriptor_, &Frame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Person_descriptor_, &Person::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BBox_descriptor_, &BBox::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_meta_2eproto() {
  delete Frame::default_instance_;
  delete Frame_reflection_;
  delete Person::default_instance_;
  delete Person_reflection_;
  delete BBox::default_instance_;
  delete BBox_reflection_;
}

void protobuf_AddDesc_meta_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_meta_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nmeta.proto\"Z\n\005Frame\022\021\n\tframe_num\030\001 \001(\005"
    "\022\021\n\tsource_id\030\002 \001(\r\022\027\n\006people\030\003 \003(\0132\007.Pe"
    "rson\022\022\n\nsum_danger\030\004 \001(\002\"Q\n\006Person\022\013\n\003ui"
    "d\030\001 \001(\005\022\021\n\tis_danger\030\002 \001(\010\022\022\n\ndanger_val"
    "\030\003 \001(\002\022\023\n\004bbox\030\004 \001(\0132\005.BBox\"@\n\004BBox\022\014\n\004l"
    "eft\030\001 \001(\r\022\013\n\003top\030\002 \001(\r\022\016\n\006height\030\003 \001(\r\022\r"
    "\n\005width\030\004 \001(\rb\006proto3", 261);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "meta.proto", &protobuf_RegisterTypes);
  Frame::default_instance_ = new Frame();
  Person::default_instance_ = new Person();
  BBox::default_instance_ = new BBox();
  Frame::default_instance_->InitAsDefaultInstance();
  Person::default_instance_->InitAsDefaultInstance();
  BBox::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_meta_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_meta_2eproto {
  StaticDescriptorInitializer_meta_2eproto() {
    protobuf_AddDesc_meta_2eproto();
  }
} static_descriptor_initializer_meta_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Frame::kFrameNumFieldNumber;
const int Frame::kSourceIdFieldNumber;
const int Frame::kPeopleFieldNumber;
const int Frame::kSumDangerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Frame::Frame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Frame)
}

void Frame::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Frame::Frame(const Frame& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Frame)
}

void Frame::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  frame_num_ = 0;
  source_id_ = 0u;
  sum_danger_ = 0;
}

Frame::~Frame() {
  // @@protoc_insertion_point(destructor:Frame)
  SharedDtor();
}

void Frame::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Frame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Frame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Frame_descriptor_;
}

const Frame& Frame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_meta_2eproto();
  return *default_instance_;
}

Frame* Frame::default_instance_ = NULL;

Frame* Frame::New(::google::protobuf::Arena* arena) const {
  Frame* n = new Frame;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Frame::Clear() {
// @@protoc_insertion_point(message_clear_start:Frame)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Frame, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Frame*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(frame_num_, source_id_);
  sum_danger_ = 0;

#undef ZR_HELPER_
#undef ZR_

  people_.Clear();
}

bool Frame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Frame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 frame_num = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &frame_num_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_source_id;
        break;
      }

      // optional uint32 source_id = 2;
      case 2: {
        if (tag == 16) {
         parse_source_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_id_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_people;
        break;
      }

      // repeated .Person people = 3;
      case 3: {
        if (tag == 26) {
         parse_people:
          DO_(input->IncrementRecursionDepth());
         parse_loop_people:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_people()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_people;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(37)) goto parse_sum_danger;
        break;
      }

      // optional float sum_danger = 4;
      case 4: {
        if (tag == 37) {
         parse_sum_danger:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sum_danger_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Frame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Frame)
  return false;
#undef DO_
}

void Frame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Frame)
  // optional int32 frame_num = 1;
  if (this->frame_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->frame_num(), output);
  }

  // optional uint32 source_id = 2;
  if (this->source_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->source_id(), output);
  }

  // repeated .Person people = 3;
  for (unsigned int i = 0, n = this->people_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->people(i), output);
  }

  // optional float sum_danger = 4;
  if (this->sum_danger() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->sum_danger(), output);
  }

  // @@protoc_insertion_point(serialize_end:Frame)
}

::google::protobuf::uint8* Frame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Frame)
  // optional int32 frame_num = 1;
  if (this->frame_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->frame_num(), target);
  }

  // optional uint32 source_id = 2;
  if (this->source_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->source_id(), target);
  }

  // repeated .Person people = 3;
  for (unsigned int i = 0, n = this->people_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->people(i), false, target);
  }

  // optional float sum_danger = 4;
  if (this->sum_danger() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->sum_danger(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Frame)
  return target;
}

int Frame::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Frame)
  int total_size = 0;

  // optional int32 frame_num = 1;
  if (this->frame_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->frame_num());
  }

  // optional uint32 source_id = 2;
  if (this->source_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->source_id());
  }

  // optional float sum_danger = 4;
  if (this->sum_danger() != 0) {
    total_size += 1 + 4;
  }

  // repeated .Person people = 3;
  total_size += 1 * this->people_size();
  for (int i = 0; i < this->people_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->people(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Frame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Frame)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Frame* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Frame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Frame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Frame)
    MergeFrom(*source);
  }
}

void Frame::MergeFrom(const Frame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Frame)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  people_.MergeFrom(from.people_);
  if (from.frame_num() != 0) {
    set_frame_num(from.frame_num());
  }
  if (from.source_id() != 0) {
    set_source_id(from.source_id());
  }
  if (from.sum_danger() != 0) {
    set_sum_danger(from.sum_danger());
  }
}

void Frame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Frame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Frame::CopyFrom(const Frame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Frame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Frame::IsInitialized() const {

  return true;
}

void Frame::Swap(Frame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Frame::InternalSwap(Frame* other) {
  std::swap(frame_num_, other->frame_num_);
  std::swap(source_id_, other->source_id_);
  people_.UnsafeArenaSwap(&other->people_);
  std::swap(sum_danger_, other->sum_danger_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Frame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Frame_descriptor_;
  metadata.reflection = Frame_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Frame

// optional int32 frame_num = 1;
void Frame::clear_frame_num() {
  frame_num_ = 0;
}
 ::google::protobuf::int32 Frame::frame_num() const {
  // @@protoc_insertion_point(field_get:Frame.frame_num)
  return frame_num_;
}
 void Frame::set_frame_num(::google::protobuf::int32 value) {
  
  frame_num_ = value;
  // @@protoc_insertion_point(field_set:Frame.frame_num)
}

// optional uint32 source_id = 2;
void Frame::clear_source_id() {
  source_id_ = 0u;
}
 ::google::protobuf::uint32 Frame::source_id() const {
  // @@protoc_insertion_point(field_get:Frame.source_id)
  return source_id_;
}
 void Frame::set_source_id(::google::protobuf::uint32 value) {
  
  source_id_ = value;
  // @@protoc_insertion_point(field_set:Frame.source_id)
}

// repeated .Person people = 3;
int Frame::people_size() const {
  return people_.size();
}
void Frame::clear_people() {
  people_.Clear();
}
const ::Person& Frame::people(int index) const {
  // @@protoc_insertion_point(field_get:Frame.people)
  return people_.Get(index);
}
::Person* Frame::mutable_people(int index) {
  // @@protoc_insertion_point(field_mutable:Frame.people)
  return people_.Mutable(index);
}
::Person* Frame::add_people() {
  // @@protoc_insertion_point(field_add:Frame.people)
  return people_.Add();
}
::google::protobuf::RepeatedPtrField< ::Person >*
Frame::mutable_people() {
  // @@protoc_insertion_point(field_mutable_list:Frame.people)
  return &people_;
}
const ::google::protobuf::RepeatedPtrField< ::Person >&
Frame::people() const {
  // @@protoc_insertion_point(field_list:Frame.people)
  return people_;
}

// optional float sum_danger = 4;
void Frame::clear_sum_danger() {
  sum_danger_ = 0;
}
 float Frame::sum_danger() const {
  // @@protoc_insertion_point(field_get:Frame.sum_danger)
  return sum_danger_;
}
 void Frame::set_sum_danger(float value) {
  
  sum_danger_ = value;
  // @@protoc_insertion_point(field_set:Frame.sum_danger)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Person::kUidFieldNumber;
const int Person::kIsDangerFieldNumber;
const int Person::kDangerValFieldNumber;
const int Person::kBboxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Person::Person()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Person)
}

void Person::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  bbox_ = const_cast< ::BBox*>(&::BBox::default_instance());
}

Person::Person(const Person& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Person)
}

void Person::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  uid_ = 0;
  is_danger_ = false;
  danger_val_ = 0;
  bbox_ = NULL;
}

Person::~Person() {
  // @@protoc_insertion_point(destructor:Person)
  SharedDtor();
}

void Person::SharedDtor() {
  if (this != default_instance_) {
    delete bbox_;
  }
}

void Person::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Person::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Person_descriptor_;
}

const Person& Person::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_meta_2eproto();
  return *default_instance_;
}

Person* Person::default_instance_ = NULL;

Person* Person::New(::google::protobuf::Arena* arena) const {
  Person* n = new Person;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Person::Clear() {
// @@protoc_insertion_point(message_clear_start:Person)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Person, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Person*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(uid_, is_danger_);
  danger_val_ = 0;
  if (GetArenaNoVirtual() == NULL && bbox_ != NULL) delete bbox_;
  bbox_ = NULL;

#undef ZR_HELPER_
#undef ZR_

}

bool Person::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Person)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_is_danger;
        break;
      }

      // optional bool is_danger = 2;
      case 2: {
        if (tag == 16) {
         parse_is_danger:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_danger_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_danger_val;
        break;
      }

      // optional float danger_val = 3;
      case 3: {
        if (tag == 29) {
         parse_danger_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &danger_val_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_bbox;
        break;
      }

      // optional .BBox bbox = 4;
      case 4: {
        if (tag == 34) {
         parse_bbox:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bbox()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Person)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Person)
  return false;
#undef DO_
}

void Person::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Person)
  // optional int32 uid = 1;
  if (this->uid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uid(), output);
  }

  // optional bool is_danger = 2;
  if (this->is_danger() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_danger(), output);
  }

  // optional float danger_val = 3;
  if (this->danger_val() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->danger_val(), output);
  }

  // optional .BBox bbox = 4;
  if (this->has_bbox()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->bbox_, output);
  }

  // @@protoc_insertion_point(serialize_end:Person)
}

::google::protobuf::uint8* Person::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Person)
  // optional int32 uid = 1;
  if (this->uid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uid(), target);
  }

  // optional bool is_danger = 2;
  if (this->is_danger() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_danger(), target);
  }

  // optional float danger_val = 3;
  if (this->danger_val() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->danger_val(), target);
  }

  // optional .BBox bbox = 4;
  if (this->has_bbox()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->bbox_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:Person)
  return target;
}

int Person::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:Person)
  int total_size = 0;

  // optional int32 uid = 1;
  if (this->uid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->uid());
  }

  // optional bool is_danger = 2;
  if (this->is_danger() != 0) {
    total_size += 1 + 1;
  }

  // optional float danger_val = 3;
  if (this->danger_val() != 0) {
    total_size += 1 + 4;
  }

  // optional .BBox bbox = 4;
  if (this->has_bbox()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->bbox_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Person::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Person)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Person* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Person>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Person)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Person)
    MergeFrom(*source);
  }
}

void Person::MergeFrom(const Person& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Person)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.uid() != 0) {
    set_uid(from.uid());
  }
  if (from.is_danger() != 0) {
    set_is_danger(from.is_danger());
  }
  if (from.danger_val() != 0) {
    set_danger_val(from.danger_val());
  }
  if (from.has_bbox()) {
    mutable_bbox()->::BBox::MergeFrom(from.bbox());
  }
}

void Person::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Person)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Person::CopyFrom(const Person& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Person)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Person::IsInitialized() const {

  return true;
}

void Person::Swap(Person* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Person::InternalSwap(Person* other) {
  std::swap(uid_, other->uid_);
  std::swap(is_danger_, other->is_danger_);
  std::swap(danger_val_, other->danger_val_);
  std::swap(bbox_, other->bbox_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Person::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Person_descriptor_;
  metadata.reflection = Person_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Person

// optional int32 uid = 1;
void Person::clear_uid() {
  uid_ = 0;
}
 ::google::protobuf::int32 Person::uid() const {
  // @@protoc_insertion_point(field_get:Person.uid)
  return uid_;
}
 void Person::set_uid(::google::protobuf::int32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:Person.uid)
}

// optional bool is_danger = 2;
void Person::clear_is_danger() {
  is_danger_ = false;
}
 bool Person::is_danger() const {
  // @@protoc_insertion_point(field_get:Person.is_danger)
  return is_danger_;
}
 void Person::set_is_danger(bool value) {
  
  is_danger_ = value;
  // @@protoc_insertion_point(field_set:Person.is_danger)
}

// optional float danger_val = 3;
void Person::clear_danger_val() {
  danger_val_ = 0;
}
 float Person::danger_val() const {
  // @@protoc_insertion_point(field_get:Person.danger_val)
  return danger_val_;
}
 void Person::set_danger_val(float value) {
  
  danger_val_ = value;
  // @@protoc_insertion_point(field_set:Person.danger_val)
}

// optional .BBox bbox = 4;
bool Person::has_bbox() const {
  return !_is_default_instance_ && bbox_ != NULL;
}
void Person::clear_bbox() {
  if (GetArenaNoVirtual() == NULL && bbox_ != NULL) delete bbox_;
  bbox_ = NULL;
}
const ::BBox& Person::bbox() const {
  // @@protoc_insertion_point(field_get:Person.bbox)
  return bbox_ != NULL ? *bbox_ : *default_instance_->bbox_;
}
::BBox* Person::mutable_bbox() {
  
  if (bbox_ == NULL) {
    bbox_ = new ::BBox;
  }
  // @@protoc_insertion_point(field_mutable:Person.bbox)
  return bbox_;
}
::BBox* Person::release_bbox() {
  // @@protoc_insertion_point(field_release:Person.bbox)
  
  ::BBox* temp = bbox_;
  bbox_ = NULL;
  return temp;
}
void Person::set_allocated_bbox(::BBox* bbox) {
  delete bbox_;
  bbox_ = bbox;
  if (bbox) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Person.bbox)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BBox::kLeftFieldNumber;
const int BBox::kTopFieldNumber;
const int BBox::kHeightFieldNumber;
const int BBox::kWidthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BBox::BBox()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BBox)
}

void BBox::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

BBox::BBox(const BBox& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BBox)
}

void BBox::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  left_ = 0u;
  top_ = 0u;
  height_ = 0u;
  width_ = 0u;
}

BBox::~BBox() {
  // @@protoc_insertion_point(destructor:BBox)
  SharedDtor();
}

void BBox::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BBox::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BBox::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BBox_descriptor_;
}

const BBox& BBox::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_meta_2eproto();
  return *default_instance_;
}

BBox* BBox::default_instance_ = NULL;

BBox* BBox::New(::google::protobuf::Arena* arena) const {
  BBox* n = new BBox;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BBox::Clear() {
// @@protoc_insertion_point(message_clear_start:BBox)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(BBox, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<BBox*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(left_, width_);

#undef ZR_HELPER_
#undef ZR_

}

bool BBox::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BBox)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 left = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &left_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_top;
        break;
      }

      // optional uint32 top = 2;
      case 2: {
        if (tag == 16) {
         parse_top:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &top_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_height;
        break;
      }

      // optional uint32 height = 3;
      case 3: {
        if (tag == 24) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_width;
        break;
      }

      // optional uint32 width = 4;
      case 4: {
        if (tag == 32) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BBox)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BBox)
  return false;
#undef DO_
}

void BBox::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BBox)
  // optional uint32 left = 1;
  if (this->left() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->left(), output);
  }

  // optional uint32 top = 2;
  if (this->top() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->top(), output);
  }

  // optional uint32 height = 3;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->height(), output);
  }

  // optional uint32 width = 4;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->width(), output);
  }

  // @@protoc_insertion_point(serialize_end:BBox)
}

::google::protobuf::uint8* BBox::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BBox)
  // optional uint32 left = 1;
  if (this->left() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->left(), target);
  }

  // optional uint32 top = 2;
  if (this->top() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->top(), target);
  }

  // optional uint32 height = 3;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->height(), target);
  }

  // optional uint32 width = 4;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->width(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:BBox)
  return target;
}

int BBox::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:BBox)
  int total_size = 0;

  // optional uint32 left = 1;
  if (this->left() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->left());
  }

  // optional uint32 top = 2;
  if (this->top() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->top());
  }

  // optional uint32 height = 3;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->height());
  }

  // optional uint32 width = 4;
  if (this->width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->width());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BBox::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BBox)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BBox* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BBox>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BBox)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BBox)
    MergeFrom(*source);
  }
}

void BBox::MergeFrom(const BBox& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BBox)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.left() != 0) {
    set_left(from.left());
  }
  if (from.top() != 0) {
    set_top(from.top());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
}

void BBox::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BBox::CopyFrom(const BBox& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BBox::IsInitialized() const {

  return true;
}

void BBox::Swap(BBox* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BBox::InternalSwap(BBox* other) {
  std::swap(left_, other->left_);
  std::swap(top_, other->top_);
  std::swap(height_, other->height_);
  std::swap(width_, other->width_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BBox::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BBox_descriptor_;
  metadata.reflection = BBox_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BBox

// optional uint32 left = 1;
void BBox::clear_left() {
  left_ = 0u;
}
 ::google::protobuf::uint32 BBox::left() const {
  // @@protoc_insertion_point(field_get:BBox.left)
  return left_;
}
 void BBox::set_left(::google::protobuf::uint32 value) {
  
  left_ = value;
  // @@protoc_insertion_point(field_set:BBox.left)
}

// optional uint32 top = 2;
void BBox::clear_top() {
  top_ = 0u;
}
 ::google::protobuf::uint32 BBox::top() const {
  // @@protoc_insertion_point(field_get:BBox.top)
  return top_;
}
 void BBox::set_top(::google::protobuf::uint32 value) {
  
  top_ = value;
  // @@protoc_insertion_point(field_set:BBox.top)
}

// optional uint32 height = 3;
void BBox::clear_height() {
  height_ = 0u;
}
 ::google::protobuf::uint32 BBox::height() const {
  // @@protoc_insertion_point(field_get:BBox.height)
  return height_;
}
 void BBox::set_height(::google::protobuf::uint32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:BBox.height)
}

// optional uint32 width = 4;
void BBox::clear_width() {
  width_ = 0u;
}
 ::google::protobuf::uint32 BBox::width() const {
  // @@protoc_insertion_point(field_get:BBox.width)
  return width_;
}
 void BBox::set_width(::google::protobuf::uint32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:BBox.width)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
