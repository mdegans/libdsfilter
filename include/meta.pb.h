// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: meta.proto

#ifndef PROTOBUF_meta_2eproto__INCLUDED
#define PROTOBUF_meta_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_meta_2eproto();
void protobuf_AssignDesc_meta_2eproto();
void protobuf_ShutdownFile_meta_2eproto();

class BBox;
class Frame;
class Person;

// ===================================================================

class Frame : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Frame) */ {
 public:
  Frame();
  virtual ~Frame();

  Frame(const Frame& from);

  inline Frame& operator=(const Frame& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Frame& default_instance();

  void Swap(Frame* other);

  // implements Message ----------------------------------------------

  inline Frame* New() const { return New(NULL); }

  Frame* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Frame& from);
  void MergeFrom(const Frame& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Frame* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 frame_num = 1;
  void clear_frame_num();
  static const int kFrameNumFieldNumber = 1;
  ::google::protobuf::int32 frame_num() const;
  void set_frame_num(::google::protobuf::int32 value);

  // optional uint32 source_id = 2;
  void clear_source_id();
  static const int kSourceIdFieldNumber = 2;
  ::google::protobuf::uint32 source_id() const;
  void set_source_id(::google::protobuf::uint32 value);

  // repeated .Person people = 3;
  int people_size() const;
  void clear_people();
  static const int kPeopleFieldNumber = 3;
  const ::Person& people(int index) const;
  ::Person* mutable_people(int index);
  ::Person* add_people();
  ::google::protobuf::RepeatedPtrField< ::Person >*
      mutable_people();
  const ::google::protobuf::RepeatedPtrField< ::Person >&
      people() const;

  // optional float sum_danger = 4;
  void clear_sum_danger();
  static const int kSumDangerFieldNumber = 4;
  float sum_danger() const;
  void set_sum_danger(float value);

  // @@protoc_insertion_point(class_scope:Frame)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 frame_num_;
  ::google::protobuf::uint32 source_id_;
  ::google::protobuf::RepeatedPtrField< ::Person > people_;
  float sum_danger_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_meta_2eproto();
  friend void protobuf_AssignDesc_meta_2eproto();
  friend void protobuf_ShutdownFile_meta_2eproto();

  void InitAsDefaultInstance();
  static Frame* default_instance_;
};
// -------------------------------------------------------------------

class Person : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Person) */ {
 public:
  Person();
  virtual ~Person();

  Person(const Person& from);

  inline Person& operator=(const Person& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Person& default_instance();

  void Swap(Person* other);

  // implements Message ----------------------------------------------

  inline Person* New() const { return New(NULL); }

  Person* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Person& from);
  void MergeFrom(const Person& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Person* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 uid = 1;
  void clear_uid();
  static const int kUidFieldNumber = 1;
  ::google::protobuf::int32 uid() const;
  void set_uid(::google::protobuf::int32 value);

  // optional bool is_danger = 2;
  void clear_is_danger();
  static const int kIsDangerFieldNumber = 2;
  bool is_danger() const;
  void set_is_danger(bool value);

  // optional float danger_val = 3;
  void clear_danger_val();
  static const int kDangerValFieldNumber = 3;
  float danger_val() const;
  void set_danger_val(float value);

  // optional .BBox bbox = 4;
  bool has_bbox() const;
  void clear_bbox();
  static const int kBboxFieldNumber = 4;
  const ::BBox& bbox() const;
  ::BBox* mutable_bbox();
  ::BBox* release_bbox();
  void set_allocated_bbox(::BBox* bbox);

  // @@protoc_insertion_point(class_scope:Person)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int32 uid_;
  bool is_danger_;
  ::BBox* bbox_;
  float danger_val_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_meta_2eproto();
  friend void protobuf_AssignDesc_meta_2eproto();
  friend void protobuf_ShutdownFile_meta_2eproto();

  void InitAsDefaultInstance();
  static Person* default_instance_;
};
// -------------------------------------------------------------------

class BBox : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:BBox) */ {
 public:
  BBox();
  virtual ~BBox();

  BBox(const BBox& from);

  inline BBox& operator=(const BBox& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BBox& default_instance();

  void Swap(BBox* other);

  // implements Message ----------------------------------------------

  inline BBox* New() const { return New(NULL); }

  BBox* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BBox& from);
  void MergeFrom(const BBox& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BBox* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 left = 1;
  void clear_left();
  static const int kLeftFieldNumber = 1;
  ::google::protobuf::uint32 left() const;
  void set_left(::google::protobuf::uint32 value);

  // optional uint32 top = 2;
  void clear_top();
  static const int kTopFieldNumber = 2;
  ::google::protobuf::uint32 top() const;
  void set_top(::google::protobuf::uint32 value);

  // optional uint32 height = 3;
  void clear_height();
  static const int kHeightFieldNumber = 3;
  ::google::protobuf::uint32 height() const;
  void set_height(::google::protobuf::uint32 value);

  // optional uint32 width = 4;
  void clear_width();
  static const int kWidthFieldNumber = 4;
  ::google::protobuf::uint32 width() const;
  void set_width(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:BBox)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint32 left_;
  ::google::protobuf::uint32 top_;
  ::google::protobuf::uint32 height_;
  ::google::protobuf::uint32 width_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_meta_2eproto();
  friend void protobuf_AssignDesc_meta_2eproto();
  friend void protobuf_ShutdownFile_meta_2eproto();

  void InitAsDefaultInstance();
  static BBox* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Frame

// optional int32 frame_num = 1;
inline void Frame::clear_frame_num() {
  frame_num_ = 0;
}
inline ::google::protobuf::int32 Frame::frame_num() const {
  // @@protoc_insertion_point(field_get:Frame.frame_num)
  return frame_num_;
}
inline void Frame::set_frame_num(::google::protobuf::int32 value) {
  
  frame_num_ = value;
  // @@protoc_insertion_point(field_set:Frame.frame_num)
}

// optional uint32 source_id = 2;
inline void Frame::clear_source_id() {
  source_id_ = 0u;
}
inline ::google::protobuf::uint32 Frame::source_id() const {
  // @@protoc_insertion_point(field_get:Frame.source_id)
  return source_id_;
}
inline void Frame::set_source_id(::google::protobuf::uint32 value) {
  
  source_id_ = value;
  // @@protoc_insertion_point(field_set:Frame.source_id)
}

// repeated .Person people = 3;
inline int Frame::people_size() const {
  return people_.size();
}
inline void Frame::clear_people() {
  people_.Clear();
}
inline const ::Person& Frame::people(int index) const {
  // @@protoc_insertion_point(field_get:Frame.people)
  return people_.Get(index);
}
inline ::Person* Frame::mutable_people(int index) {
  // @@protoc_insertion_point(field_mutable:Frame.people)
  return people_.Mutable(index);
}
inline ::Person* Frame::add_people() {
  // @@protoc_insertion_point(field_add:Frame.people)
  return people_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Person >*
Frame::mutable_people() {
  // @@protoc_insertion_point(field_mutable_list:Frame.people)
  return &people_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Person >&
Frame::people() const {
  // @@protoc_insertion_point(field_list:Frame.people)
  return people_;
}

// optional float sum_danger = 4;
inline void Frame::clear_sum_danger() {
  sum_danger_ = 0;
}
inline float Frame::sum_danger() const {
  // @@protoc_insertion_point(field_get:Frame.sum_danger)
  return sum_danger_;
}
inline void Frame::set_sum_danger(float value) {
  
  sum_danger_ = value;
  // @@protoc_insertion_point(field_set:Frame.sum_danger)
}

// -------------------------------------------------------------------

// Person

// optional int32 uid = 1;
inline void Person::clear_uid() {
  uid_ = 0;
}
inline ::google::protobuf::int32 Person::uid() const {
  // @@protoc_insertion_point(field_get:Person.uid)
  return uid_;
}
inline void Person::set_uid(::google::protobuf::int32 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:Person.uid)
}

// optional bool is_danger = 2;
inline void Person::clear_is_danger() {
  is_danger_ = false;
}
inline bool Person::is_danger() const {
  // @@protoc_insertion_point(field_get:Person.is_danger)
  return is_danger_;
}
inline void Person::set_is_danger(bool value) {
  
  is_danger_ = value;
  // @@protoc_insertion_point(field_set:Person.is_danger)
}

// optional float danger_val = 3;
inline void Person::clear_danger_val() {
  danger_val_ = 0;
}
inline float Person::danger_val() const {
  // @@protoc_insertion_point(field_get:Person.danger_val)
  return danger_val_;
}
inline void Person::set_danger_val(float value) {
  
  danger_val_ = value;
  // @@protoc_insertion_point(field_set:Person.danger_val)
}

// optional .BBox bbox = 4;
inline bool Person::has_bbox() const {
  return !_is_default_instance_ && bbox_ != NULL;
}
inline void Person::clear_bbox() {
  if (GetArenaNoVirtual() == NULL && bbox_ != NULL) delete bbox_;
  bbox_ = NULL;
}
inline const ::BBox& Person::bbox() const {
  // @@protoc_insertion_point(field_get:Person.bbox)
  return bbox_ != NULL ? *bbox_ : *default_instance_->bbox_;
}
inline ::BBox* Person::mutable_bbox() {
  
  if (bbox_ == NULL) {
    bbox_ = new ::BBox;
  }
  // @@protoc_insertion_point(field_mutable:Person.bbox)
  return bbox_;
}
inline ::BBox* Person::release_bbox() {
  // @@protoc_insertion_point(field_release:Person.bbox)
  
  ::BBox* temp = bbox_;
  bbox_ = NULL;
  return temp;
}
inline void Person::set_allocated_bbox(::BBox* bbox) {
  delete bbox_;
  bbox_ = bbox;
  if (bbox) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:Person.bbox)
}

// -------------------------------------------------------------------

// BBox

// optional uint32 left = 1;
inline void BBox::clear_left() {
  left_ = 0u;
}
inline ::google::protobuf::uint32 BBox::left() const {
  // @@protoc_insertion_point(field_get:BBox.left)
  return left_;
}
inline void BBox::set_left(::google::protobuf::uint32 value) {
  
  left_ = value;
  // @@protoc_insertion_point(field_set:BBox.left)
}

// optional uint32 top = 2;
inline void BBox::clear_top() {
  top_ = 0u;
}
inline ::google::protobuf::uint32 BBox::top() const {
  // @@protoc_insertion_point(field_get:BBox.top)
  return top_;
}
inline void BBox::set_top(::google::protobuf::uint32 value) {
  
  top_ = value;
  // @@protoc_insertion_point(field_set:BBox.top)
}

// optional uint32 height = 3;
inline void BBox::clear_height() {
  height_ = 0u;
}
inline ::google::protobuf::uint32 BBox::height() const {
  // @@protoc_insertion_point(field_get:BBox.height)
  return height_;
}
inline void BBox::set_height(::google::protobuf::uint32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:BBox.height)
}

// optional uint32 width = 4;
inline void BBox::clear_width() {
  width_ = 0u;
}
inline ::google::protobuf::uint32 BBox::width() const {
  // @@protoc_insertion_point(field_get:BBox.width)
  return width_;
}
inline void BBox::set_width(::google::protobuf::uint32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:BBox.width)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_meta_2eproto__INCLUDED
